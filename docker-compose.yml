version: '3.8'

services:
  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-production
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=/app/data/astradio.db
      - SWISS_EPHEMERIS_DATA_PATH=/app/temp-swisseph
      - JWT_SECRET=${JWT_SECRET:-astradio-production-jwt-secret}
      - SESSION_SECRET=${SESSION_SECRET:-astradio-production-session-secret}
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - api_data:/app/data
      - audio_files:/app/public/audio
    networks:
      - astradio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      api:
        condition: service_healthy
    networks:
      - astradio-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - web
    networks:
      - astradio-network
    restart: unless-stopped

volumes:
  api_data:
    driver: local
  audio_files:
    driver: local

networks:
  astradio-network:
    driver: bridge